＜1-7　Visual Studio Codeで実際にコードを書いてみよう＞

■コンソールへ出力

//コンソールへ出力(値がひとつ)
console.log('あいうえお');

//コンソールへ出力（値が複数）
console.log('りんご','ばなな','みかん');


■オブジェクト、プロパティ、メソッド

//メソッドを利用する
window.alert('こんにちは！');

//querySelector()を使って要素を取得、プロパティの値を変更する
document.querySelector('#test1').innerHTML='出力されました';


＜2-2. let,const＞

■varとlet

//varを用いて変数を作成
var a ='鈴木';
console.log(a);

//letを用いて変数を作成
let b ='田中';
console.log(b);

//アラートボックスに出したい場合
let B ='田中';
window.alert(b);


■スコープ

//スコープ（varの場合）
function sample1(){
  var price = 10;

  if(price == 10){
    var sum = price + 100;
  }

  console.log(sum);
}
sample1();

//スコープ（letの場合）
上記のvarをletに変更


■再宣言

//再宣言（varの場合）
var fish1 ='さんま';
var fish1 ='まぐろ';
console.log(fish1);

//再宣言（letの場合）
let fish2 ='さんま';
let fish2 ='まぐろ';
console.log(fish2);


■const定数

//constは値を変えようとするとエラーになる
let c = 10;
c = c + 20;    //aに20を足してaに再代入
console.log(c); //コンソールに30が出力される


＜2-3　テンプレートリテラル＞

■改行コード

//¥nで改行
const fruit_name ='りんごの¥n値段'; 
console.log(fruit_name);


■テンプレートリテラル

//テンプレートリテラル（改行）
console.log(`長い文章はテンプレートリテラルを
使うと便利です`);

//変数や式の埋め込み
let price_banana = 100 * 1.10;
console.log(`バナナの値段は${price_banana}円です`);


//文字列と変数の結合
let price_tomato = 200 * 1.10;
console.log('トマトの値段は' + price_tomato + '円です');


＜2-4　分割代入＞

■配列の要素

//基本の配列
fish_price = [100,200,300];
console.log(fish_price[0]);


//オブジェクトリテラル
age = {suzuki:30,tanaka:40,sasaki:25};
console.log(age.suzuki);

//分割代入
const info = ['山田','東京都','090-1111-2222'];
const [name,area,tel] = info;
console.log(area);　//出力する変数を変えてみましょう


＜2-5　アロー関数＞

■関数

//taxという関数作成（100×1.1の結果を変数tax_inに代入、それをコンソールに出力する）
function tax(){
  let tax_in = 100 * 1.10;
  console.log(tax_in);
}

//tax関数を実行
tax();


■関数と引数

//tax関数の引数xに100を代入し、1.10を乗算した値をtax_inに代入しコンソールへ出力
function tax(x){
  let tax_in = x * 1.10;
  console.log(tax_in);
}

//tax関数を実行
tax(100);


■returnと返り値

//返り値として「こんにちは〇〇さん」を返す
function hello(name){
  return `こんにちは${name}さん`;
}
console.log(hello('太郎'));

■アロー関数

//アロー関数を記述(引数がない場合)
let arrow_sample2 = () => {
  console.log('アロー関数です');
}
arrow_sample2();

//応用した記述方法(引数が１つの場合)
let arrow_sample3 = x => {  //引数が１つなら()を省略できる
  console.log(x);
}
arrow_sample3('引数が１つの場合');

//応用した記述方法(処理が１行の場合)
let arrow_sample4 = y => console.log(y);  //{}内の処理が１行なら、{}を省略できる
arrow_sample4('処理が１行の場合');


■コールバック関数

//1000ミリ秒後に、コンソールに出力
setTimeout(function(){
  console.log('1000ミリ秒後に、コンソールに出力');
},1000);

//上記のコールバック関数をアロー関数に書き換える
setTimeout(()=>{
  console.log('1000ミリ秒後に、コンソールに出力');
},1000);


■おまけ（ボタン）
<button onclick="関数名">実行</button>